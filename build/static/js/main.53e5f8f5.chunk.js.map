{"version":3,"sources":["assets/twitter-logo.svg","constants.js","Components/LoadingIndicator/index.js","Components/SelectCharacter/index.js","Components/Arena/index.js","App.js","index.js"],"names":["CONTRACT_ADDRESS","transformCharacterData","characterData","name","imageURI","hp","toNumber","maxHp","attackDamage","defence","LoadingIndicator","className","SelectCharacter","setCharacterNFT","useState","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","useEffect","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","myEpicGame","console","log","getCharacters","a","getAllDefaultCharacters","charactersTxn","map","error","onCharacterMint","sender","tokenId","characterIndex","alert","checkIfUserHasNFT","characterNFT","on","off","character","index","src","alt","type","onClick","characterId","mintCharacterNFT","mintTxn","wait","warn","Arena","boss","setBoss","attackState","setAttackState","showToast","setShowToast","fetchBoss","getBigBoss","bossTxn","onAttackComplete","newBossHp","newPlayerHp","bossHp","playerHp","prevState","runAttackAction","attackBoss","attackTxn","setTimeout","id","value","max","TWITTER_HANDLE","TWITTER_LINK","App","undefined","currentAccount","setCurrentAccount","isLoading","setIsLoading","checkIfWalletIsConnected","request","method","accounts","length","account","connectWalletAction","fetchNFTMetadata","provider","txn","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.53e5f8f5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","export const CONTRACT_ADDRESS = \"0xD9C83303a4938728B7bd2e323638F7b1F6ea8A94\";\r\n\r\nexport const transformCharacterData = (characterData) => {\r\n  return {\r\n    name: characterData.name,\r\n    imageURI: characterData.imageURI,\r\n    hp: characterData.hp.toNumber(),\r\n    maxHp: characterData.maxHp.toNumber(),\r\n    attackDamage: characterData.attackDamage.toNumber(),\r\n    defence: characterData.defence.toNumber(),\r\n  };\r\n};\r\n","import React from 'react';\nimport './LoadingIndicator.css';\n\nconst LoadingIndicator = () => {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default LoadingIndicator;\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./SelectCharacter.css\";\r\nimport { ethers } from \"ethers\";\r\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\r\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\r\nimport LoadingIndicator from \"../LoadingIndicator\";\r\n\r\nconst SelectCharacter = ({ setCharacterNFT }) => {\r\n  const [characters, setCharacters] = useState([]);\r\n  const [gameContract, setGameContract] = useState(null);\r\n  const [mintingCharacter, setMintingCharacter] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const { ethereum } = window;\r\n\r\n    if (ethereum) {\r\n      const provider = new ethers.providers.Web3Provider(ethereum);\r\n      const signer = provider.getSigner();\r\n      const gameContract = new ethers.Contract(\r\n        CONTRACT_ADDRESS,\r\n        myEpicGame,\r\n        signer\r\n      );\r\n\r\n      setGameContract(gameContract);\r\n    } else {\r\n      console.log(\"Ethereum object not found\");\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const getCharacters = async () => {\r\n      try {\r\n        console.log(\"Getting contract characters to mint\");\r\n\r\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\r\n        console.log(\"charactersTxn:\", charactersTxn);\r\n\r\n        const characters = charactersTxn?.map((characterData) =>\r\n          transformCharacterData(characterData)\r\n        );\r\n\r\n        setCharacters(characters);\r\n      } catch (error) {\r\n        console.error(\"Something went wrong fetching characters:\", error);\r\n      }\r\n    };\r\n\r\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\r\n      console.log(\r\n        `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\r\n      );\r\n      alert(\r\n        `Your NFT is all done -- see it here: https://rinekby.rarible.com/token/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`\r\n      );\r\n\r\n      if (gameContract) {\r\n        const characterNFT = await gameContract.checkIfUserHasNFT();\r\n        console.log(\"CharacterNFT: \", characterNFT);\r\n        setCharacterNFT(transformCharacterData(characterNFT));\r\n      }\r\n    };\r\n\r\n    if (gameContract) {\r\n      getCharacters();\r\n\r\n      gameContract.on(\"CharacterNFTMinted\", onCharacterMint);\r\n    }\r\n    if (gameContract) {\r\n      getCharacters();\r\n    }\r\n    return () => {\r\n      if (gameContract) {\r\n        gameContract.off(\"CharacterNFTMinted\", onCharacterMint);\r\n      }\r\n    };\r\n  }, [gameContract, setCharacterNFT]);\r\n  const mintCharacterNFTAction = (characterId) => async () => {\r\n    try {\r\n      if (gameContract) {\r\n        setMintingCharacter(true);\r\n        console.log(\"Minting character in progress...\");\r\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\r\n        await mintTxn.wait();\r\n        console.log(\"mintTxn:\", mintTxn);\r\n        setMintingCharacter(false);\r\n      }\r\n    } catch (error) {\r\n      console.warn(\"MintCharacterAction Error:\", error);\r\n      setMintingCharacter(false);\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"select-character-container\">\r\n      <h2>Mint Your Hero. Choose wisely.</h2>\r\n      <div className=\"character-grid\">\r\n        {characters?.map((character, index) => (\r\n          <div className=\"character-item\" key={character.name}>\r\n            <div className=\"name-container\">\r\n              <p>{character.name}</p>\r\n            </div>\r\n            <img src={character.imageURI} alt={character.name} />\r\n            <button\r\n              type=\"button\"\r\n              className=\"character-mint-button\"\r\n              onClick={mintCharacterNFTAction(index)}\r\n            >{`Mint ${character.name}`}</button>\r\n          </div>\r\n        ))}\r\n        {mintingCharacter && (\r\n          <div className=\"loading\">\r\n            <div className=\"indicator\">\r\n              <LoadingIndicator />\r\n              <p>Minting In Progress...</p>\r\n            </div>\r\n            <img\r\n              src=\"https://media2.giphy.com/media/61tYloUgq1eOk/giphy.gif?cid=ecf05e47dg95zbpabxhmhaksvoy8h526f96k4em0ndvx078s&rid=giphy.gif&ct=g\"\r\n              alt=\"Minting loading indicator\"\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectCharacter;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\r\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\r\nimport \"./Arena.css\";\r\nimport LoadingIndicator from \"../LoadingIndicator\";\r\n\r\n/*\r\n * We pass in our characterNFT metadata so we can a cool card in our UI\r\n */\r\nconst Arena = ({ characterNFT, setCharacterNFT }) => {\r\n  // State\r\n  const [gameContract, setGameContract] = useState(null);\r\n  const [boss, setBoss] = useState(null);\r\n  const [attackState, setAttackState] = useState(\"\");\r\n  const [showToast, setShowToast] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchBoss = async () => {\r\n      const bossTxn = await gameContract.getBigBoss();\r\n      console.log(\"Boss:\", bossTxn);\r\n      setBoss(transformCharacterData(bossTxn));\r\n    };\r\n\r\n    const onAttackComplete = (newBossHp, newPlayerHp) => {\r\n      const bossHp = newBossHp.toNumber();\r\n      const playerHp = newPlayerHp.toNumber();\r\n\r\n      console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\r\n\r\n      setBoss((prevState) => {\r\n        return { ...prevState, hp: bossHp };\r\n      });\r\n\r\n      setCharacterNFT((prevState) => {\r\n        return { ...prevState, hp: playerHp };\r\n      });\r\n    };\r\n\r\n    if (gameContract) {\r\n      fetchBoss();\r\n      gameContract.on(\"AttackComplete\", onAttackComplete);\r\n    }\r\n\r\n    return () => {\r\n      if (gameContract) {\r\n        gameContract.off(\"AttackComplete\", onAttackComplete);\r\n      }\r\n    };\r\n  }, [gameContract, setCharacterNFT]);\r\n\r\n  useEffect(() => {\r\n    const { ethereum } = window;\r\n\r\n    if (ethereum) {\r\n      const provider = new ethers.providers.Web3Provider(ethereum);\r\n      const signer = provider.getSigner();\r\n      const gameContract = new ethers.Contract(\r\n        CONTRACT_ADDRESS,\r\n        myEpicGame,\r\n        signer\r\n      );\r\n\r\n      setGameContract(gameContract);\r\n    } else {\r\n      console.log(\"Ethereum object not found\");\r\n    }\r\n  }, []);\r\n\r\n  const runAttackAction = async () => {\r\n    try {\r\n      if (gameContract) {\r\n        setAttackState(\"attacking\");\r\n        console.log(\"Attacking boss...\");\r\n        const attackTxn = await gameContract.attackBoss();\r\n        await attackTxn.wait();\r\n        console.log(\"attackTxn:\", attackTxn);\r\n        setAttackState(\"hit\");\r\n        setShowToast(true);\r\n        setTimeout(() => {\r\n          setShowToast(false);\r\n        }, 5000);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error attacking boss:\", error);\r\n      setAttackState(\"\");\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"arena-container\">\r\n      {/* Boss */}\r\n      {boss && showToast && (\r\n        <div id=\"toast\" className=\"show\">\r\n          <div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\r\n        </div>\r\n      )}\r\n      {boss && (\r\n        <div className=\"boss-container\">\r\n          <div className={`boss-content ${attackState}`}>\r\n            <h2>🔥 {boss.name} 🔥</h2>\r\n            <div className=\"image-content\">\r\n              <img src={boss.imageURI} alt={`Boss ${boss.name}`} />\r\n              <div className=\"health-bar\">\r\n                <progress value={boss.hp} max={boss.maxHp} />\r\n                <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"attack-container\">\r\n            <button className=\"cta-button\" onClick={runAttackAction}>\r\n              {`💥 Attack ${boss.name}`}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Character NFT */}\r\n      {characterNFT && (\r\n        <div className=\"players-container\">\r\n          <div className=\"player-container\">\r\n            <h2>Your Character</h2>\r\n            <div className=\"player\">\r\n              <div className=\"image-content\">\r\n                <h2>{characterNFT.name}</h2>\r\n                <img\r\n                  src={characterNFT.imageURI}\r\n                  alt={`Character ${characterNFT.name}`}\r\n                />\r\n                <div className=\"health-bar\">\r\n                  <progress value={characterNFT.hp} max={characterNFT.maxHp} />\r\n                  <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\r\n                </div>\r\n              </div>\r\n              <div className=\"stats\">\r\n                <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\r\n                <h4>{`🛡 Defence: ${characterNFT.defence}`}</h4>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {attackState === \"attacking\" && (\r\n        <div className=\"loading-indicator\">\r\n          <LoadingIndicator />\r\n          <p>Attacking ⚔️</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Arena;\r\n","import React, { useEffect, useState } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport \"./App.css\";\nimport SelectCharacter from \"./Components/SelectCharacter\";\nimport Arena from \"./Components/Arena\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"./constants\";\nimport myEpicGame from \"./utils/MyEpicGame.json\";\nimport { ethers } from \"ethers\";\nimport LoadingIndicator from \"./Components/LoadingIndicator\";\nconst TWITTER_HANDLE = \"0xJoydeeeep\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(undefined);\n  const [characterNFT, setCharacterNFT] = useState(undefined);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have MetaMask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectWalletAction = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      /*\n       * Fancy method to request access to account.\n       */\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      /*\n       * Boom! This should print out public address once we authorize Metamask.\n       */\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    checkIfWalletIsConnected();\n  }, []);\n\n  useEffect(() => {\n    const fetchNFTMetadata = async () => {\n      console.log(\"Checking for Character NFT on address:\", currentAccount);\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame,\n        signer\n      );\n\n      const txn = await gameContract.checkIfUserHasNFT();\n      if (txn.name) {\n        console.log(\"User has character NFT\");\n        setCharacterNFT(transformCharacterData(txn));\n      } else {\n        console.log(\"No character NFT found\");\n      }\n      setIsLoading(false);\n    };\n\n    if (currentAccount) {\n      console.log(\"CurrentAccount:\", currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">⚔️ Metaverse Slayer ⚔️</p>\n          <p className=\"sub-text\">Team up to protect the Metaverse!</p>\n          {isLoading ? (\n            <LoadingIndicator />\n          ) : (\n            <>\n              {!currentAccount && (\n                <div className=\"connect-wallet-container\">\n                  <img\n                    src=\"https://64.media.tumblr.com/tumblr_mbia5vdmRd1r1mkubo1_500.gifv\"\n                    alt=\"Monty Python Gif\"\n                  />\n                  <button\n                    className=\"cta-button connect-wallet-button\"\n                    onClick={connectWalletAction}\n                  >\n                    Connect Wallet To Get Started\n                  </button>\n                </div>\n              )}\n              {currentAccount && !characterNFT && (\n                <SelectCharacter setCharacterNFT={setCharacterNFT} />\n              )}\n              {currentAccount && characterNFT && (\n                <Arena\n                  characterNFT={characterNFT}\n                  setCharacterNFT={setCharacterNFT}\n                />\n              )}\n            </>\n          )}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}